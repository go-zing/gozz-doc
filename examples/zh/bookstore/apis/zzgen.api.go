// Code generated by gozz:api github.com/go-zing/gozz. DO NOT EDIT.

package apis

import (
	"context"
	types "github.com/go-zing/gozz-doc-examples/bookstore/types"
)

var _ = context.Context(nil)

type Apis struct {
	Types_BookService types.BookService
}

func (s Apis) Range(fn func(interface{}, []map[string]interface{})) {
	for _, f := range []func() (interface{}, []map[string]interface{}){
		s._Types_BookService,
	} {
		fn(f())
	}
}

func (s Apis) _Types_BookService() (interface{}, []map[string]interface{}) {
	t := s.Types_BookService
	return &t, []map[string]interface{}{
		{
			"name":     "GetBook",
			"method":   "get",
			"resource": "{id}",
			"options": map[string]string{
				"prefix": "books",
			},
			"invoke": func(ctx context.Context, dec func(interface{}) error) (interface{}, error) {
				var in types.QueryBook
				if err := dec(&in); err != nil {
					return nil, err
				}
				return t.GetBook(ctx, in)
			},
		},
		{
			"name":     "ListBook",
			"method":   "get",
			"resource": "",
			"options": map[string]string{
				"prefix": "books",
			},
			"invoke": func(ctx context.Context, dec func(interface{}) error) (interface{}, error) {
				var in types.QueryListBook
				if err := dec(&in); err != nil {
					return nil, err
				}
				return t.ListBook(ctx, in)
			},
		},
		{
			"name":     "EditBook",
			"method":   "put",
			"resource": "{id}",
			"options": map[string]string{
				"prefix": "books",
			},
			"invoke": func(ctx context.Context, dec func(interface{}) error) (interface{}, error) {
				var in types.FormBook
				if err := dec(&in); err != nil {
					return nil, err
				}
				return t.EditBook(ctx, in)
			},
		},
		{
			"name":     "NewBook",
			"method":   "post",
			"resource": "",
			"options": map[string]string{
				"prefix": "books",
			},
			"invoke": func(ctx context.Context, dec func(interface{}) error) (interface{}, error) {
				var in types.FormBook
				if err := dec(&in); err != nil {
					return nil, err
				}
				return t.NewBook(ctx, in)
			},
		},
		{
			"name":     "Delete",
			"method":   "delete",
			"resource": "{id}",
			"options": map[string]string{
				"prefix": "books",
			},
			"invoke": func(ctx context.Context, dec func(interface{}) error) (interface{}, error) {
				var in types.QueryBook
				if err := dec(&in); err != nil {
					return nil, err
				}
				return t.Delete(ctx, in)
			},
		},
	}
}
